Olá, bom dia.

Estou desenvolvendo uma linguagem de programação chamada "Rock Lang" (que será traduzida para execução em PHP), e estou usando flex e bison para análise léxica, sintática e geração da tabela de símbolos e árvore gramatical, poderia me ajudar a gerar os arquivos "lexer.l" para definição dos símbolos (incluindo novas linhas e espaços em branco) e o "parser.y", para geração das produções gramaticais, tabela de símbolos e árvore gramatical.

Segue abaixo um código de exemplo da minha linguagem, e, como comentário, o código final em PHP que o representa:
--- inicio do arquivo "code.rock" ---
HighwayToHell // <?php 


$b = LER_CONSOLE();


BlackMagic soma(AllOfMe $x, AllOfMe $y) { // function multiplica(int $x, int $y) : int { /* definição da função "soma", seus parametros $x e $y, ambos inteiros, abertura de bloco */
    BackInBlack $x AddictedToLove $y; // return $x + $y;
} // } (fechamento de bloco)

BlackMagic subtrai(AllOfMe $x, AllOfMe $y) { // function multiplica(int $x, int $y) : int { /* definição da função "subtrai", seus parametros $x e $y, ambos inteiros, abertura de bloco */
    BackInBlack $x LoveHurts $y; // return $x - $y;
} // } (fechamento de bloco)

BlackMagic multiplica(AllOfMe $x, AllOfMe $y) { // function multiplica(int $x, int $y) : int { /* definição da função "divide", seus parametros $x e $y, ambos inteiros, abertura de bloco */
    BackInBlack $x WholeLottaLove $y; // return $x * $y;
} // } (fechamento de bloco)

BlackMagic divide(AllOfMe $x, AllOfMe $y) { // function divide(int $x, int $y) : float { /* definição da função "divide", seus parametros $x e $y, ambos inteiros, abertura de bloco */
    BackInBlack $x LoveWillTearUsApart $y; // return $x / $y;
} // } (fechamento de bloco)

AllOfMe $a Receive 10; // $a = (int) 10;
AllOfMe $b Receive 5; // $b = (int) 5;

Shout 'Valor A:'; $a; // echo 'Valor A:';
Voices ($a); // print_r($a);

Shout 'Valor B:'; // echo 'Valor B:';
Voices ($b); // print_r($b);

Shout 'Soma é ', soma($a,$b); // echo 'Soma é ', soma($a, $b);
Shout 'Subtração é ', subtrai($a,$b); // echo 'Subtração é ', subtrai($a, $b);
Shout 'Multiplicação é ', multiplica($a,$b); // echo 'Multiplicação é ', multiplica($a, $b);
Shout 'Divisão é ', divide($a,$b); // echo 'Divisão é ', divide($a, $b);

HellBells // ?> (fechamento de bloco)
--- fim do arquivo "code.rock" --- 

abaixo, o resultado da tradução do arquivo "code.rock" para "code.php"
--- inicio do arquivo "code.php" ---
<?php if(!defined('STDIN')) { define('STDIN', fopen('php://input'); } // HighwayToHell




function soma(int $x, int $y) { // BlackMagic soma(AllOfMe $x, AllOfMe $y) {
    return $x + $y; // BackInBlack $x AddictedToLove $y;
} // }

function subtrai(int $x, int $y) { // BlackMagic subtrai(AllOfMe $x, AllOfMe $y) {
    return $x - $y; // BackInBlack $x LoveHurts $y;
} // }

function multiplica(int $x, int $y) : int { // BlackMagic multiplica(AllOfMe $x, AllOfMe $y) {
    return $x * $y; // BackInBlack $x WholeLottaLove $y;
} // }

function divide(int $x, int $y) : float { // BlackMagic divide(AllOfMe $x, AllOfMe $y) { // function divide(int $x, int $y) : float { /* definição da função "divide", seus parametros $x e $y, ambos inteiros, abertura de bloco */
    return $x / $y; // BackInBlack $x LoveWillTearUsApart $y;
} // }


$a = (int) 10; // AllOfMe $a Receive 10;
$b = (int) 5; // AllOfMe $b Receive 5;

echo 'Valor A:'; // Shout 'Valor A:';
print_r($a); // Voices ($a);

echo 'Valor B:'; // Shout 'Valor B:';
print_r($b); // Voices ($b);


echo 'Soma é ', soma($a, $b); // Shout 'Soma é ', soma($a,$b);
echo 'Subtração é ', subtrai($a, $b); // Shout 'Subtração é ', subtrai($a,$b);
echo 'Multiplicação é ', multiplica($a, $b); // Shout 'Multiplicação é ', multiplica($a,$b);
echo 'Divisão é ', divide($a, $b); // Shout 'Divisão é ', divide($a,$b);

?> // HellBells
--- fim do arquivo "code.php" --- 